#!/usr/bin/python
# -* coding: utf-8 *-

import sys, os
import serial
import io
import subprocess
import time
import traceback
import json
import tempfile
import shutil

mypath = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.insert(0, mypath)

from lib.parser import Parser

statefile = '/home/bernd/logs/rs232.state'
logfile = '/home/bernd/logs/rs232.log'
pidfile = '/tmp/hargassner-rs232.pid'

last_sms = time.time()


if os.path.exists(pidfile):
  pid = open(pidfile, 'r').read().strip()
  if os.path.exists('/proc/%s' % pid):
    print('lockfile exists and other process is running')
    sys.exit(1)
  else:
    print('removing stale PID file, previous execution failed!?')
    os.unlink(pidfile)

pidf = open(pidfile, 'w')
pidf.write("%s" % os.getpid())
pidf.close()


def log(s):
	try:
		with open(logfile, 'a') as flog:
			t = str(s)
			if not t.endswith('\n'):
				t = t + '\n'
			flog.write( t )
	except Exception as e:
		traceback.print_exception(e)

def sms(s):
	global last_sms
	if time.time() - last_sms < 3600:
		# Einnmal pro Stunde reicht
		log('Not sending SMS too frequently')
		return
	dest = '+491719354145'
	log('sending SMS to %s' % dest)
	subprocess.call(['/home/bernd/hargassner-monitor/sms/send_sms', dest, s])
	last_sms = time.time()
	log('finished sending SMS')

ser = serial.Serial(
	port='/dev/ttyUSB0',
	baudrate=19200,
	parity=serial.PARITY_NONE,
	stopbits=serial.STOPBITS_ONE,
	bytesize=serial.EIGHTBITS,
	timeout=1
	)

sio = io.TextIOWrapper(io.BufferedRWPair(ser, ser), encoding='iso-8859-1')

debug = False
if len(sys.argv) > 1 and sys.argv[1] == '--debug':
	debug = True

state_data = {'status': {}, 'loglines': []}
lastlog = 0
curtime = ''
while True:
	data = sio.readline().strip()
	if data:
		if data.startswith('tm '):
			curtime = data
		if data.startswith('z '):
			log(data)
			state_data['loglines'].insert(0, (time.time(), data))
			if len(state_data['loglines']) > 10:
				del state_data['loglines'][10]
			if 'Stoerung' in data and 'Stop:1' in data:
				sms('Stoerung an der Heizung: %s' % data)
			if 'Can Install Error' in data or 'IOS CAN wait' in data:
				sms('Stoerung an der Heizung: %s' % data)
			# Wenn ein event kommt, dann gleich die n√§chste Statuszeile loggen
			lastlog = 0
		if data.startswith('pm '):
			if lastlog < time.time() - 60:
				log(curtime)
				log(data)
				lastlog = time.time()
			status = Parser(data)
			if debug: 
				for index in range(len(status.elements)):
					print('%3i: %s' % (index, status.elements[index]))
			state_data['status'] = status.__dict__
			with open(statefile+'.tmp', 'w') as fp:
				json.dump(state_data, fp)
				fp.close()
				shutil.move(fp.name, statefile)

log.close()

os.unlink(pidfile)
